#pragma once
#include <cstdint>

#ifndef M_PI
    #define M_PI   3.14159265358979323846
    #define M_PI_D 3.14159265358979323846
#endif

namespace Common {
    // Q4.12 fixed point multiplier for panning.
    // Applies circular panning law for a pan value where 0 = left, 127 = center, 254 - right
    // Value goes from 0 - 4096, which corresponds to the volume of the right channel.
    // To get the left channel, plug in `254 - panning` instead
    static const uint16_t lut_panning[256] = {
        0x0000, 0x0019, 0x0032, 0x004b, 0x0064, 0x007e, 0x0097, 0x00b0, 0x00c9, 0x00e2, 0x00fb, 0x0114, 0x012d, 0x0146, 0x015f,
        0x0178, 0x0191, 0x01aa, 0x01c3, 0x01dc, 0x01f5, 0x020e, 0x0227, 0x0240, 0x0259, 0x0272, 0x028b, 0x02a3, 0x02bc, 0x02d5,
        0x02ee, 0x0306, 0x031f, 0x0338, 0x0350, 0x0369, 0x0381, 0x039a, 0x03b2, 0x03cb, 0x03e3, 0x03fb, 0x0414, 0x042c, 0x0444,
        0x045c, 0x0475, 0x048d, 0x04a5, 0x04bd, 0x04d5, 0x04ed, 0x0505, 0x051c, 0x0534, 0x054c, 0x0564, 0x057b, 0x0593, 0x05aa,
        0x05c2, 0x05d9, 0x05f1, 0x0608, 0x061f, 0x0636, 0x064d, 0x0664, 0x067b, 0x0692, 0x06a9, 0x06c0, 0x06d7, 0x06ee, 0x0704,
        0x071b, 0x0731, 0x0748, 0x075e, 0x0774, 0x078a, 0x07a0, 0x07b7, 0x07cd, 0x07e2, 0x07f8, 0x080e, 0x0824, 0x0839, 0x084f,
        0x0864, 0x087a, 0x088f, 0x08a4, 0x08b9, 0x08ce, 0x08e3, 0x08f8, 0x090d, 0x0921, 0x0936, 0x094a, 0x095f, 0x0973, 0x0987,
        0x099c, 0x09b0, 0x09c4, 0x09d7, 0x09eb, 0x09ff, 0x0a12, 0x0a26, 0x0a39, 0x0a4c, 0x0a60, 0x0a73, 0x0a86, 0x0a99, 0x0aab,
        0x0abe, 0x0ad1, 0x0ae3, 0x0af5, 0x0b08, 0x0b1a, 0x0b2c, 0x0b3e, 0x0b50, 0x0b61, 0x0b73, 0x0b84, 0x0b96, 0x0ba7, 0x0bb8,
        0x0bc9, 0x0bda, 0x0beb, 0x0bfc, 0x0c0c, 0x0c1d, 0x0c2d, 0x0c3d, 0x0c4d, 0x0c5d, 0x0c6d, 0x0c7d, 0x0c8d, 0x0c9c, 0x0cac,
        0x0cbb, 0x0cca, 0x0cd9, 0x0ce8, 0x0cf7, 0x0d05, 0x0d14, 0x0d22, 0x0d31, 0x0d3f, 0x0d4d, 0x0d5b, 0x0d69, 0x0d76, 0x0d84,
        0x0d91, 0x0d9e, 0x0dab, 0x0db8, 0x0dc5, 0x0dd2, 0x0ddf, 0x0deb, 0x0df7, 0x0e04, 0x0e10, 0x0e1b, 0x0e27, 0x0e33, 0x0e3e,
        0x0e4a, 0x0e55, 0x0e60, 0x0e6b, 0x0e76, 0x0e81, 0x0e8b, 0x0e95, 0x0ea0, 0x0eaa, 0x0eb4, 0x0ebe, 0x0ec7, 0x0ed1, 0x0eda,
        0x0ee3, 0x0eed, 0x0ef6, 0x0efe, 0x0f07, 0x0f10, 0x0f18, 0x0f20, 0x0f28, 0x0f30, 0x0f38, 0x0f40, 0x0f47, 0x0f4f, 0x0f56,
        0x0f5d, 0x0f64, 0x0f6b, 0x0f71, 0x0f78, 0x0f7e, 0x0f84, 0x0f8a, 0x0f90, 0x0f96, 0x0f9c, 0x0fa1, 0x0fa6, 0x0fab, 0x0fb0,
        0x0fb5, 0x0fba, 0x0fbe, 0x0fc3, 0x0fc7, 0x0fcb, 0x0fcf, 0x0fd3, 0x0fd6, 0x0fda, 0x0fdd, 0x0fe0, 0x0fe3, 0x0fe6, 0x0fe9,
        0x0feb, 0x0fee, 0x0ff0, 0x0ff2, 0x0ff4, 0x0ff6, 0x0ff7, 0x0ff9, 0x0ffa, 0x0ffb, 0x0ffc, 0x0ffd, 0x0ffe, 0x0ffe, 0x0fff,
        0x0fff,
    };

#define TODO()
} // namespace Common
